# Executed Cells:
## Cell 1:

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px


from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

pd.set_option('display.max_columns',200)
%matplotlib inline

## Cell 2:


path="data/For_modeling.csv.zip"

## Cell 3:

data = pd.read_csv(path,
                  dtype={
                      'Duration': 'int8',
                      'Distance': 'int8',
                      'PLong': 'float32',
                      'PLatd': 'float32',
                      'DLong': 'float32',
                      'Haversine':'float32',
                      'Pmonth':'int8',
                      'Pday':'int8',
                      'Phour':'int8',
                      'Pmin':'int8',
                      'PDweek':'int8',
                      'Dmonth':'int8',
                      'Dday':'int8',
                      'Dhour':'int8',
                      'Dmin':'int8',
                      'DDweek':'int8',
                      'Temp':'float32',
                      'Precip':'float32',
                      'Wind':'float32',
                      'Solar':'float32',
                      'Snow':'float32',
                      'GroundTemp':'float32',
                      'Dust':'float32'
                  },index_col=0

                  ).sample(frac=1)


data.head(25)

## Cell 4:


data = data.reset_index().drop(columns=['index'])
data.head(25)

## Cell 5:


data= data[data['Haversine']!=0].reset_index().drop(columns=['index'])


## Cell 6:



data["Distance"]=data['Distance'].apply(lambda x:abs(x))
data[data['Distance']<0].shape

## Cell 7:


data = data[data['Distance']!=0].reset_index().drop(columns=['index'])
data[data['Distance']==0].shape

# Target Cell:



data1= pd.Categorical(data['PDweek'], categories=range(7), ordered=True)
data1.cat.rename_categories(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], inplace=True)


average_duration = data1.groupby('DayOfWeek')['Duration'].mean()


plt.plot(average_duration.index, average_duration.values)
plt.xlabel('Day of Week')
plt.ylabel('Average Duration')
plt.title('Average Trip Duration by Day of Week')
plt.xticks(rotation=45)
plt.show()