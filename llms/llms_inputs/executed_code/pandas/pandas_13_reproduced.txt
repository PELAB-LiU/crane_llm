# Executed Cells:
## Cell 1:





import numpy as np
import pandas as pd




import warnings
warnings.filterwarnings('ignore')



import os

import pickle
from sklearn_pandas import DataFrameMapper
from sklearn.preprocessing import OneHotEncoder,MinMaxScaler,StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.ensemble import GradientBoostingRegressor,RandomForestRegressor
from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score

import matplotlib.pyplot as plt

## Cell 2:

df = pd.read_csv('data/car data.csv')
df.head()

## Cell 3:


df.drop_duplicates(inplace = True)
df.duplicated().sum()

## Cell 4:


dfm = DataFrameMapper([(['Year'],StandardScaler()),
                       (['Selling_Price'],None),
                       (['Driven_kms'],MinMaxScaler()),
                       ('Owner',None),
                       (['Car_Name'],OneHotEncoder()),
                       (['Fuel_Type'],OneHotEncoder()),
                       (['Selling_type'],OneHotEncoder()),
                       (['Transmission'],OneHotEncoder()),
                       (['Present_Price'],MinMaxScaler())
                      ],df_out=True)
transformed = dfm.fit_transform(df)

## Cell 5:



dfm2 = DataFrameMapper([(['Year'],None),
                        (['Selling_Price'],None),
                        (['Driven_kms'],None),
                        ('Owner',None),
                        (['Car_Name'],LabelEncoder()),
                        (['Fuel_Type'],LabelEncoder()),
                        (['Selling_type'],LabelEncoder()),
                        (['Transmission'],LabelEncoder()),
                        (['Present_Price'],None)
                       ],df_out=True)
transformed2 = dfm2.fit_transform(df)

## Cell 6:


X = transformed.loc[:,~transformed.columns.isin(['Selling_Price'])]
y = transformed.loc[:,'Selling_Price']


def changename(name):
    for i in range(len(df[name].unique())):
        s = name + '_' + str(i)
        X.columns = [col.replace(s, name + '_' + df[name].unique()[i]) for col in X.columns]

changename('Selling_type')
changename('Transmission')
changename('Fuel_Type')
changename('Car_Name')

X.columns.tolist()

## Cell 7:


X_ = transformed2.loc[:,~transformed2.columns.isin(['Selling_Price'])]
y_ = transformed2.loc[:,'Selling_Price']

## Cell 8:


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=20)

X_2_train, X_2_test, y_2_train, y_2_test = train_test_split(X_, y_, test_size=0.1, random_state=20)

## Cell 9:


gbr = GradientBoostingRegressor(random_state=20)
gbr.fit(X_train,y_train)
gbr_y_predict = gbr.predict(X_test)

## Cell 10:

gbr2 = GradientBoostingRegressor(random_state=20)
gbr2.fit(X_2_train,y_2_train)
gbr2_y_predict = gbr2.predict(X_2_test)

## Cell 11:

gbr_gs = GradientBoostingRegressor(loss='squared_error', n_estimators=133,random_state=20)
gbr_gs.fit(X_2_train,y_2_train)
gbr_gs_y_predict = gbr_gs.predict(X_2_test)
gbr_gs.score(X_2_test,y_2_test)

## Cell 12:


rfr = RandomForestRegressor(random_state=20)
rfr.fit(X_train,y_train)
rfr_y_predict = rfr.predict(X_test)

## Cell 13:

rfr2 = RandomForestRegressor(random_state=20)
rfr2.fit(X_2_train,y_2_train)
rfr2_y_predict = rfr2.predict(X_2_test)

## Cell 14:

rfr_gs = RandomForestRegressor(criterion = 'friedman_mse',
                               n_estimators = 136,
                               random_state=20)
rfr_gs.fit(X_2_train,y_2_train)
rfr_gs_y_predict = rfr_gs.predict(X_2_test)

# Target Cell:


model_dict = {'X_train': [gbr, gbr_gs, rfr, rfr_gs],
              'X_2_train': [gbr2, rfr2]}

for key in model_dict:
    f_list = []
    for model in model_dict[key]:
        feature_importance = model.feature_importances_
        f_list.append(feature_importance)

    fearture_names = X_train.columns.tolist() if key == 'X_train' else X_2_train.columns.tolist()
    f_index = ['gbr', 'gbr_gs', 'rfr', 'rfr_gs'] if key == 'X_train' else ['gbr2','rfr2']

    feature_df = pd.DataFrame(np.array(f_list), columns=fearture_names, index=f_index)
    display(feature_df)