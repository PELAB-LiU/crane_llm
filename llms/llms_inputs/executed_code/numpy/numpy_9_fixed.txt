# Executed Cells:
No cell has been executed
# Target Cell:

import os
import numpy as np
import torch


def load_loss_weights_from_directory(directory_path):
    weight_files = [filename for filename in os.listdir(directory_path) if filename.endswith(".npy")]



    weights = [np.atleast_1d(np.load(os.path.join(directory_path, filename))) for filename in weight_files]

    return np.concatenate(weights)


def save_weights_to_directory(directory_path, weights):
    os.makedirs(directory_path, exist_ok=True)
    np.save(os.path.join(directory_path, "updated_regression_weights.npy"), weights)


regression_weights_directory = 'data/adjusted_survival_2019'


regression_weight = load_loss_weights_from_directory(regression_weights_directory)


num_epochs_update_regression = 5
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')


output_directory = 'data/updated_regression_weights'
os.makedirs(output_directory, exist_ok=True)

for epoch in range(num_epochs_update_regression):

    mean_loss_regression = 0.5
    std_loss_regression = 0.1


    reference_value_regression = 0.5


    update_factor_regression = np.exp((mean_loss_regression - reference_value_regression) / std_loss_regression)


    update_factor_regression = max(0.0, min(1.0, update_factor_regression))


    regression_weight = torch.tensor(regression_weight, dtype=torch.float32, device=device)


    if update_factor_regression < 1e-6 and torch.all(regression_weight == 0):

        update_factor_regression = 1e-3


    regression_weight *= update_factor_regression


    save_weights_to_directory(output_directory, regression_weight.cpu().numpy())



with np.printoptions(threshold=np.inf):
    print(f"Regression Weight (Epoch {epoch + 1}): \n{regression_weight}")






