# Executed Cells:
## Cell 1:

import os
import cv2
import glob
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from PIL import Image
import pickle

## Cell 2:




train_dir="data/signature-verification-dataset/sign_data/train"
test_dir="data/signature-verification-dataset/sign_data/test"

## Cell 3:

SIZE = 224

## Cell 4:

def find_files_in_folder(path, folder_name):
    folder_path = None
    for root, dirs, files in os.walk(path):
        if folder_name in dirs:
            folder_path = os.path.join(root, folder_name)
            break
    img1 = []
    if folder_path:
        files = os.listdir(folder_path)
        for file in files:
            folder_name = os.path.dirname(file)
            file_name = os.path.basename(file)
            img1.append(file_name)
        return img1
    else:
        return None


train_data_names = []
test_data_names = []

train_data = []
train_labels = []

real_images = []
forged_images = []

for per in os.listdir(train_dir):
    for data in glob.glob(train_dir+'/'+per+'/*.*'):

        train_data_names.append(data)

        if per[-1]=='g':
            img = cv2.imread(data)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            img = cv2.resize(img, (SIZE,SIZE))
            forged_images.append([img])

        else:
            img = cv2.imread(data)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            img = cv2.resize(img, (SIZE,SIZE))
            real_images.append([img])




print("number of real_images",len(real_images))


test_data = []
test_labels = []

for per in os.listdir(test_dir):
    for data in glob.glob(test_dir+'/'+per+'/*.*'):
        test_data_names.append(data)

        if per[-1]=='g':
            img = cv2.imread(data)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            img = cv2.resize(img, (SIZE,SIZE))
            forged_images.append([img])

        else:
            img = cv2.imread(data)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            img = cv2.resize(img, (SIZE,SIZE))
            real_images.append([img])






































real_images = np.array(real_images)
forged_images = np.array(forged_images)


real_labels = np.zeros((real_images.shape[0], 1))
forged_labels = np.ones((forged_images.shape[0], 1))

print("number of real_images",len(real_images))
print("number of forged_images",len(forged_images))

## Cell 5:
















images = np.concatenate((real_images, forged_images))
labels = np.concatenate((real_labels, forged_labels))


train_data, test_data, train_labels, test_labels = train_test_split(images, labels, test_size=0.2, random_state=42)
print(train_data.shape)
print(test_data.shape)

## Cell 6:

print(train_labels.shape)

# Target Cell:

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split





train_data = train_data.astype('float32') / 255
test_data = test_data.astype('float32') / 255


model = keras.Sequential([
    layers.LSTM(256, input_shape=(train_data.shape[1], train_data.shape[2])),
    layers.Dense(2, activation='softmax')
])

model.compile(optimizer='rmsprop',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()


early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)


history = model.fit(train_data, train_labels, batch_size=32, epochs=10, validation_split=.2, callbacks=[early_stop])


import matplotlib.pyplot as plt

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(acc) + 1)

plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()