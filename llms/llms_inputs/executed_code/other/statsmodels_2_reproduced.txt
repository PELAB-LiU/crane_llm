# Executed Cells:
## Cell 1:

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import xgboost as xgb
import seaborn as sns
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.stattools import adfuller
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV
from statsmodels.tsa.seasonal import seasonal_decompose
from matplotlib.ticker import MultipleLocator


train_csv_path = "data/train.csv"
train = pd.read_csv(train_csv_path)

test_csv_path = "data/test.csv"
test = pd.read_csv(test_csv_path)


## Cell 2:

train['date'] = pd.to_datetime(train['date'])
train['day'] = train['date'].dt.day
train['month'] = train['date'].dt.month
train['year'] = train['date'].dt.year
train['date'] = pd.to_datetime(train['date'])
train['day_of_week'] = train['date'].dt.weekday
train['week_of_year'] = train['date'].dt.isocalendar().week.astype(int)
train['quarter'] = train['date'].dt.quarter
train['day_of_year'] = train['date'].dt.dayofyear


train['month_sin'] = np.sin(2 * np.pi * train['month'] / 12)
train['month_cos'] = np.cos(2 * np.pi * train['month'] / 12)










train['week_sin'] = np.sin(2 * np.pi * train['day_of_week'] / 7)
train['week_cos'] = np.cos(2 * np.pi * train['day_of_week'] / 7)



train['sales_lag_7'] = train['sales'].shift(7)
train['sales_lag_365'] = train['sales'].shift(365)

## Cell 3:


train_subset = train[(train['store'] == 8) & (train['item'] == 20)]
train_subset.set_index('date', inplace=True)
train_subset.index.freq = 'D'
train_subset.head()

## Cell 4:

sarima_data = train_subset[['sales']]

print(sarima_data.index)
sarima_data.head()

## Cell 5:


train_end_date = '2017-09-30'
pred_start_date = '2017-10-01'
pred_end_date = '2017-12-31'

y_train = sarima_data.loc[:train_end_date, 'sales']
y_val = sarima_data.loc[pred_start_date:pred_end_date, 'sales']

exog_columns = ['year','day_of_week', 'month_cos']


exog_train = train_subset.loc[:train_end_date, exog_columns]
exog_val = train_subset.loc[pred_start_date:pred_end_date, exog_columns]


p, d, q = 1, 1, 1
P, D, Q, s = 1, 1, 1, 7




model = SARIMAX(y_train, exog=exog_train, order=(p, d, q), seasonal_order=(P, D, Q, s))
results = model.fit(maxiter=150, disp=-1)


y_pred = results.predict(start=pd.Timestamp(pred_start_date), end=pd.Timestamp(pred_end_date), exog=exog_val, dynamic=False)


rmse = mean_squared_error(y_val, y_pred, squared=False)
print(f'RMSE: {rmse}')

## Cell 6:

residuals = y_val - y_pred
plt.figure(figsize=(12, 6))
plt.plot(residuals.index, residuals, label='Residuals')
plt.axhline(0, color='red', linestyle='--')
plt.title('Residuals Over Time')
plt.grid(True)
plt.legend()
plt.show()

# Target Cell:

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

plt.figure(figsize=(12, 6))
plot_acf(residuals, lags=180, title='ACF of Residuals')
plt.show()

plt.figure(figsize=(12, 6))
plot_pacf(residuals, lags=180, title='PACF of Residuals')
plt.show()


