# Executed Cells:
## Cell 1:





import numpy as np
import pandas as pd




import os
for dirname, _, filenames in os.walk('data'):
    for filename in filenames:
        print(os.path.join(dirname, filename))




## Cell 2:

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

## Cell 3:

train_ds = pd.read_csv("data/train.csv")
test_ds = pd.read_csv("data/test.csv")

## Cell 4:

train_ds.drop(['Id', 'MoSold', 'GarageYrBlt', 'Condition1', 'Condition2'], axis = 1, inplace = True)

## Cell 5:

for column in train_ds:
    null_count = train_ds[column].isnull().sum()
    if null_count > 1:
        print(f"Dropping column {column} with {null_count} missing values.")
        train_ds.drop(column, axis = 1, inplace = True)

## Cell 6:

le = LabelEncoder()
string_columns = train_ds.select_dtypes(include = ['object']).columns
for column in string_columns:
    train_ds[column] = le.fit_transform(train_ds[column])

## Cell 7:

X = train_ds.drop(['SalePrice'], axis = 1)
y = train_ds['SalePrice']

## Cell 8:

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)

## Cell 9:

from sklearn.ensemble import RandomForestRegressor
FReg = RandomForestRegressor(n_estimators = 100, random_state = 42)

## Cell 10:

FReg.fit(X_train, y_train)

## Cell 11:

y_pred = FReg.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'R2 Score: {r2}')
print(f'MSE: {mse}')

## Cell 12:

test_ds_ids = test_ds['Id']
test_ds.drop(['Id', 'MoSold', 'GarageYrBlt', 'Condition1', 'Condition2'], axis = 1, inplace = True)

## Cell 13:









test_ds = test_ds[X_train.columns]
for col in test_ds.columns:
    if test_ds[col].dtype == 'object':
        test_ds[col] = test_ds[col].fillna("")
    elif pd.api.types.is_numeric_dtype(test_ds[col]):
        test_ds[col] = test_ds[col].fillna(0)

## Cell 14:

le = LabelEncoder()
string_columns = test_ds.select_dtypes(include = ['object']).columns
for column in string_columns:
    test_ds[column] = le.fit_transform(test_ds[column])

# Target Cell:

predictions = FReg.predict(test_ds)
submissions_df = pd.DataFrame({
    "ID" : test_ds_ids,
    "Predictions" : predictions
})

