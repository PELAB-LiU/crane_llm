# Executed Cells:
## Cell 1:

import pandas as pd
import numpy as np
from pprint import pprint
import matplotlib.pyplot as plt
import seaborn as sns

import holoviews as hv
hv.extension('bokeh', 'matplotlib', logo=False)


import warnings
warnings.filterwarnings('ignore')

## Cell 2:

df=pd.read_csv('data/hmeq.csv')
df.head()

## Cell 3:

df.loc[df.BAD == 1, 'STATUS'] = 'DEFAULT'
df.loc[df.BAD == 0, 'STATUS'] = 'PAID'

# Current relevent runtime information:
{'__method__df_groupby': {'type': "<class 'method'>"},
 '__method__hv_Dimension': {'type': '<class '
                                    "'param.parameterized.ParameterizedMetaclass'>"},
 '__method__hv_Histogram': {'type': '<class '
                                    "'holoviews.core.data.PipelineMeta'>"},
 '__method__hv_HoloMap': {'type': '<class '
                                  "'param.parameterized.ParameterizedMetaclass'>"},
 '__method__np_histogram': {'type': "<class 'numpy._ArrayFunctionDispatcher'>"},
 'df': {'execution_cell_source': {'cellno': 1, 'lineno': 1},
        'has_nan': True,
        'per_column': {'BAD': {'num_unique': 2,
                               'type': 'binary',
                               'value_range': (0, 1)},
                       'CLAGE': {'num_unique': 5314,
                                 'type': 'continuous',
                                 'value_range': (0.0, 1168.2335609)},
                       'CLNO': {'num_unique': 62,
                                'type': 'continuous',
                                'value_range': (0.0, 71.0)},
                       'DEBTINC': {'num_unique': 4693,
                                   'type': 'continuous',
                                   'value_range': (0.5244992154, 203.31214869)},
                       'DELINQ': {'num_unique': 14,
                                  'type': 'continuous',
                                  'value_range': (0.0, 15.0)},
                       'DEROG': {'num_unique': 11,
                                 'type': 'continuous',
                                 'value_range': (0.0, 10.0)},
                       'JOB': {'example_values': ['Other',
                                                  'Office',
                                                  'Sales',
                                                  'Mgr',
                                                  'ProfExe'],
                               'num_unique': 6,
                               'type': 'categorical'},
                       'LOAN': {'num_unique': 540,
                                'type': 'continuous',
                                'value_range': (1100, 89900)},
                       'MORTDUE': {'num_unique': 5053,
                                   'type': 'continuous',
                                   'value_range': (2063.0, 399550.0)},
                       'NINQ': {'num_unique': 16,
                                'type': 'continuous',
                                'value_range': (0.0, 17.0)},
                       'REASON': {'num_unique': 2,
                                  'type': 'categorical',
                                  'unique_values': ['HomeImp', 'DebtCon']},
                       'STATUS': {'num_unique': 2,
                                  'type': 'categorical',
                                  'unique_values': ['DEFAULT', 'PAID']},
                       'VALUE': {'num_unique': 5381,
                                 'type': 'continuous',
                                 'value_range': (8000.0, 855909.0)},
                       'YOJ': {'num_unique': 99,
                               'type': 'continuous',
                               'value_range': (0.0, 41.0)}},
        'shape': (5960, 14),
        'type': 'pandas.core.frame.DataFrame'},
 'hv': {'type': "<class 'module'>"},
 'np': {'type': "<class 'module'>"}}
# Target Cell:



g = df.groupby('STATUS')

cols = ['LOAN',
        'MORTDUE',
        'VALUE',
        'YOJ',
        'DEROG',
        'DELINQ',
        'CLAGE',
        'NINQ',
        'CLNO']
dd={}


for col in cols:



    values = df[col].dropna().values
    if len(values) == 0:
        print(f"Skipping column '{col}' â€“ all values are NaN")
        continue

    freq, edges = np.histogram(values)


    dd[col] = hv.Histogram((edges, freq), label='ALL Loans').redim.label(x=' ')

    freq, edges = np.histogram(g.get_group('PAID')[col].values, bins=edges)
    dd[col] *= hv.Histogram((edges, freq), label='PAID Loans').redim.label(x=' ')

    freq, edges = np.histogram(g.get_group('DEFAULT')[col].values, bins=edges)
    dd[col] *= hv.Histogram((edges, freq), label='DEFAULT Loans' ).redim.label(x=' ')

var = [*dd]
kdims=hv.Dimension(('var', 'Variable'), values=var)
hv.HoloMap(dd, kdims=kdims)