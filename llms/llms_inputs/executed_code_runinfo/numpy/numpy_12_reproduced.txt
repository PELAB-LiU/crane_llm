# Executed Cells:
## Cell 1:

import pandas
import matplotlib.pyplot as plt
dataset = pandas.read_csv('data/international-airline-passengers.csv', usecols=[1], engine='python')
plt.plot(dataset)
plt.show()

## Cell 2:

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.layers import LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error

## Cell 3:


scaler = MinMaxScaler(feature_range=(0, 1))
dataset = scaler.fit_transform(dataset)

## Cell 4:


train_size = int(len(dataset) * 0.67)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]
print(len(train), len(test))

## Cell 5:


def create_dataset(dataset, look_back=1):
	dataX, dataY = [], []
 for i in range(len(dataset)-look_back-1):
		a = dataset[i:(i+look_back), 0]
  dataX.append(a)
  dataY.append(dataset[i + look_back, 0])
 return np.array(dataX), np.array(dataY)

# Current relevent runtime information:
{'Dense': {'type': "<class 'type'>"},
 'LSTM': {'type': "<class 'type'>"},
 'Sequential': {'type': "<class 'type'>"},
 '__method__np_empty_like': {'type': '<class '
                                     "'numpy._ArrayFunctionDispatcher'>"},
 '__method__np_nan': {'type': "<class 'float'>", 'value': nan},
 '__method__np_reshape': {'type': "<class 'numpy._ArrayFunctionDispatcher'>"},
 '__method__np_sqrt': {'type': "<class 'numpy.ufunc'>"},
 '__method__plt_plot': {'type': "<class 'function'>"},
 '__method__plt_show': {'type': "<class 'function'>"},
 '__method__scaler_inverse_transform': {'type': "<class 'method'>"},
 'create_dataset': {'execution_cell_source': {'cellno': 4, 'lineno': 2},
                    'type': "<class 'function'>"},
 'dataset': {'dtype': 'float64',
             'execution_cell_source': {'cellno': 2, 'lineno': 3},
             'has_nan': True,
             'shape': (145, 1),
             'type': 'numpy.ndarray',
             'value_range': (0.0, 1.0)},
 'mean_squared_error': {'type': "<class 'function'>"},
 'np': {'type': "<class 'module'>"},
 'plt': {'type': "<class 'module'>"},
 'scaler': {'class_name': 'MinMaxScaler',
            'execution_cell_source': {'cellno': 2, 'lineno': 2},
            'fitted_attributes': {'n_features_in_': 1, 'n_outputs_': None},
            'is_fitted': True,
            'module': 'sklearn.preprocessing._data',
            'type': "<class 'sklearn.preprocessing._data.MinMaxScaler'>"},
 'test': {'dtype': 'float64',
          'has_nan': True,
          'shape': (48, 1),
          'type': 'numpy.ndarray',
          'value_range': (0.3803088803088803, 1.0)},
 'train': {'dtype': 'float64',
           'has_nan': False,
           'shape': (97, 1),
           'type': 'numpy.ndarray',
           'value_range': (0.0, 0.5965250965250966)}}
# Target Cell:


look_back = 12
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)

trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))


model = Sequential()
model.add(LSTM(4, input_shape=(1, look_back),return_sequences=True))
model.add(Dense(1))
model.add(LSTM(4))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(trainX, trainY, epochs=10, batch_size=1, verbose=2)


trainPredict = model.predict(trainX)
testPredict = model.predict(testX)

trainPredict = scaler.inverse_transform(trainPredict)
trainY = scaler.inverse_transform([trainY])
testPredict = scaler.inverse_transform(testPredict)
testY = scaler.inverse_transform([testY])

trainScore = np.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))
print('Train Score: %.2f RMSE' % (trainScore))
testScore = np.sqrt(mean_squared_error(testY[0], testPredict[:,0]))
print('Test Score: %.2f RMSE' % (testScore))

trainPredictPlot = np.empty_like(dataset)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict

testPredictPlot = np.empty_like(dataset)
testPredictPlot[:, :] = np.nan
testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict

plt.plot(scaler.inverse_transform(dataset))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()