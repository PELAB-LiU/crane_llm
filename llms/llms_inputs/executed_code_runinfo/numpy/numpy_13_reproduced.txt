# Executed Cells:
## Cell 1:


import os
import IPython
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.io import wavfile
from scipy.fft import fft, fftfreq
from scipy.signal import spectrogram, find_peaks

## Cell 2:


from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import confusion_matrix, accuracy_score

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

import librosa
import numpy as np

import sklearn
import sklearn.cluster
import sklearn.pipeline

import matplotlib.pyplot as plt
%matplotlib inline

## Cell 3:

path = "data_small/"
def FeatureExtractor(path, n_mels, fmax=20000, fmin=20):

    data = []
    max_harm_length = 0

    for dirname, _, filenames in os.walk(path):
        for filename in filenames:
            foldername = os.path.basename(dirname)
            full_path = os.path.join(dirname, filename)

            y, sr = librosa.load(full_path)
            mel = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=n_mels, fmax=fmax, fmin=fmin)
            logam = librosa.power_to_db(mel)
            data.append(logam)

    data = np.array(data)
    return data

# Current relevent runtime information:
{'FeatureExtractor': {'execution_cell_source': {'cellno': 31, 'lineno': 2},
                      'type': "<class 'function'>"},
 'path': {'execution_cell_source': {'cellno': 31, 'lineno': 1},
          'type': "<class 'str'>",
          'value': 'data_small/'}}
# Target Cell:

NX = FeatureExtractor(path, n_mels = 10)