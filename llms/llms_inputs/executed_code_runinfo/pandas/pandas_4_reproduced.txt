# Executed Cells:
## Cell 1:

import numpy as np
import pandas as pd

from keras.utils import to_categorical
from keras.callbacks import EarlyStopping
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D, BatchNormalization
from keras.losses import categorical_crossentropy
from sklearn.metrics import accuracy_score
from keras.optimizers import Adam
from keras.regularizers import l2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

import os
print(os.listdir("data"))

## Cell 2:

data = pd.read_csv('data/fer2013.csv')

data.shape

## Cell 3:

import pandas as pd


data['disgust_images'] = ""


disgust_images = data.loc[data['emotion'] == 1, 'pixels']
data.loc[data['emotion'] == 1, 'disgust_images'] = disgust_images


data.drop(data[data['emotion'] == 1].index, inplace=True)


print(data.shape)

## Cell 4:


emotion_map = {0: 'Angry', 2:'Fear', 3: 'Happy', 4: 'Sad', 5: 'Surprise', 6: 'Neutral'}
emotion_counts = data['emotion'].value_counts(sort=False).reset_index()
emotion_counts.columns = ['emotion', 'number']
emotion_counts['emotion'] = emotion_counts['emotion'].map(emotion_map)
emotion_counts

# Current relevent runtime information:
{'__method__plt_figure': {'type': "<class 'function'>"},
 '__method__plt_imshow': {'type': "<class 'function'>"},
 '__method__plt_show': {'type': "<class 'function'>"},
 '__method__plt_subplot': {'type': "<class 'function'>"},
 '__method__plt_title': {'type': "<class 'function'>"},
 'data': {'execution_cell_source': {'cellno': 1, 'lineno': 1},
          'has_nan': False,
          'per_column': {'Usage': {'dtype': 'object',
                                   'num_unique': 3,
                                   'type': 'categorical',
                                   'unique_values': ['Training',
                                                     'PublicTest',
                                                     'PrivateTest']},
                         'disgust_images': {'dtype': 'object',
                                            'num_unique': 1,
                                            'type': 'categorical',
                                            'unique_values': ['']},
                         'emotion': {'dtype': 'int64',
                                     'num_unique': 6,
                                     'type': 'categorical_numeric',
                                     'value_range': (0, 6)},
                         'pixels': {'dtype': 'object',
                                    'example_values': ['46 44 40 35 30 24 '
                                                       '20...',
                                                       '164 102 110 190 239 '
                                                       '...',
                                                       '53 51 49 53 46 20 '
                                                       '29...',
                                                       '25 77 138 124 81 60 '
                                                       '...',
                                                       '177 38 15 25 22 16 '
                                                       '2...'],
                                    'num_unique': 33576,
                                    'type': 'categorical'}},
          'shape': (35340, 4),
          'type': 'pandas.core.frame.DataFrame'},
 'plt': {'type': "<class 'module'>"}}
# Target Cell:

def row2image(row):
    pixels, emotion = row['pixels'], emotion_map[row['emotion']]
    img = np.array(pixels.split(), dtype=np.uint8)
    img = img.reshape((48, 48))
    image = np.zeros((48, 48, 3), dtype=np.uint8)
    image[:, :, 0] = img
    image[:, :, 1] = img
    image[:, :, 2] = img

    return image, emotion

plt.figure(0, figsize=(16,10))
for i in range(1,8):
    face = data[data['emotion'] == i-1].iloc[0]

    img, label = row2image(face)
    plt.subplot(2,4,i)
    plt.imshow(img[0])
    plt.title(label)

plt.show()