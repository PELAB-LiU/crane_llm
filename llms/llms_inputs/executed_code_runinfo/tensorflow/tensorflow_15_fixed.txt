# Executed Cells:
## Cell 1:

import numpy as np
import pandas as pd
from pathlib import Path
import os

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split

import tensorflow as tf
from tensorflow.keras import datasets, layers, models, losses, Model
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential

import subprocess
from IPython.display import FileLink, display

from sklearn.metrics import confusion_matrix, classification_report

## Cell 2:



num_samples = (len(os.listdir('data_small/Chic')) +
               len(os.listdir('data_small/Duck')))


img_height, img_width = 224,224
batch_size = num_samples // 200

## Cell 3:

train_ds = tf.keras.utils.image_dataset_from_directory(
  'data_small',
  validation_split=0.2,
  subset="training",
  label_mode='binary',
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

## Cell 4:

val_ds = tf.keras.utils.image_dataset_from_directory(
 'data_small',
  validation_split=0.2,
  subset="validation",
  label_mode='binary',
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

## Cell 5:

test_ds = tf.keras.utils.image_dataset_from_directory(
 'data_small_test',
  image_size=(img_height, img_width),
  label_mode='binary',
  batch_size=batch_size)

## Cell 6:

base_model = tf.keras.applications.ResNet50(weights = 'imagenet', include_top = False, input_shape = (224,224,3))

## Cell 7:

x = base_model.output
x = keras.layers.GlobalAveragePooling2D()(x)



x = keras.layers.Dense(units=1024, activation='relu')(x)
x = keras.layers.Dense(units=512, activation='relu')(x)
x = keras.layers.Dense(units=256, activation='relu')(x)
x = keras.layers.Dense(units=128, activation='relu')(x)
x = keras.layers.Dense(units=1, activation='sigmoid')(x)

model = keras.models.Model(inputs=base_model.input,
                                    outputs=x)

## Cell 8:

for layer in model.layers[:175]:
    layer.trainable = False

## Cell 9:

model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)

## Cell 10:

history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=2,
    callbacks=[
        tf.keras.callbacks.EarlyStopping(
            monitor='val_loss',
            patience=5,
            restore_best_weights=True
        ),
        tf.keras.callbacks.ReduceLROnPlateau(
            monitor='val_loss',
            patience=3
        )
    ]
)

## Cell 11:

results = model.evaluate(test_ds, verbose=0)
print("    Test Loss: {:.5f}".format(results[0]))
print("Test Accuracy: {:.2f}%".format(results[1] * 100))

## Cell 12:

predictions = (model.predict(test_ds) >= 0.5)

# Current relevent runtime information:
{'__method__model_predict': {'type': "<class 'method'>"},
 '__method__np_argmax': {'type': "<class 'numpy._ArrayFunctionDispatcher'>"},
 '__method__np_array': {'type': "<class 'builtin_function_or_method'>"},
 '__method__np_concatenate': {'type': '<class '
                                      "'numpy._ArrayFunctionDispatcher'>"},
 '__method__tf_math': {'type': "<class 'module'>"},
 'model': {'execution_cell_source': {'cellno': 7, 'lineno': 12},
           'type': "<class 'keras.src.models.functional.Functional'>"},
 'np': {'type': "<class 'module'>"},
 'predictions': {'dtype': 'bool',
                 'execution_cell_source': {'cellno': 12, 'lineno': 1},
                 'has_nan': False,
                 'shape': (146, 1),
                 'type': 'numpy.ndarray'},
 'test_ds': {'element_spec': '(TensorSpec(shape=(None, 224, 224, 3), '
                             'dtype=tf.float32, name=None), '
                             'TensorSpec(shape=(None, 1), dtype=tf.float32, '
                             'name=None))',
             'execution_cell_source': {'cellno': 4, 'lineno': 1},
             'type': 'tensorflow.python.data.ops.prefetch_op._PrefetchDataset'},
 'tf': {'type': "<class 'module'>"},
 'x': {'execution_cell_source': {'cellno': 7, 'lineno': 10},
       'type': "<class 'keras.src.backend.common.keras_tensor.KerasTensor'>"}}
# Target Cell:

predictions = np.array([])
labels =  np.array([])
for x, y in test_ds:


    pred = model.predict(x)
    pred_classes = np.argmax(pred, axis=1)
    predictions = np.concatenate([predictions, pred_classes])

    labels = np.concatenate([labels, np.argmax(y.numpy(), axis=-1)])

tf.math.confusion_matrix(labels=labels, predictions=predictions).numpy()