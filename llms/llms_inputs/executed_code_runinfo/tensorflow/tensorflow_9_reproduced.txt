# Executed Cells:
## Cell 1:

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import string
from plotly import graph_objs as go
import plotly.express as px
import plotly.figure_factory as ff
from wordcloud import STOPWORDS
from collections import defaultdict
import random
import re
import string

## Cell 2:

df = pd.read_csv('data/train.csv')
test_df = pd.read_csv('data/test.csv')
df.sample(5)

## Cell 3:

class_names =['Not a disaster', 'Disaster']

## Cell 4:


df['word_count'] = df['text'].apply(lambda x: len(str(x).split()))


df['unique_word_count'] = df['text'].apply(lambda x: len(set(str(x).split())))


df['stop_word_count'] = df['text'].apply(lambda x: len([w for w in str(x).lower().split() if w in STOPWORDS]))


df['url_count'] = df['text'].apply(lambda x: len([w for w in str(x).lower().split() if 'http' in w or 'https' in w]))


df['mean_word_length'] = df['text'].apply(lambda x: np.mean([len(w) for w in str(x).split()]))


df['char_count'] = df['text'].apply(lambda x: len(str(x)))


df['punctuation_count'] = df['text'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))


df['hashtag_count'] = df['text'].apply(lambda x: len([c for c in str(x) if c == '#']))


df['mention_count'] = df['text'].apply(lambda x: len([c for c in str(x) if c == '@']))

## Cell 5:


df['word_count'].loc[df['word_count']>60] = 60
df['char_count'].loc[df['char_count']>350] = 350
df['punctuation_count'].loc[df['punctuation_count']>10] = 10

f, axes = plt.subplots(3, 1, figsize=(20,30))
sns.boxplot(x='target', y='word_count', data=df, ax=axes[0])
axes[0].set_xlabel('Target', fontsize=12)
axes[0].set_title("Number of words in each class", fontsize=15)

sns.boxplot(x='target', y='char_count', data=df, ax=axes[1])
axes[1].set_xlabel('Target', fontsize=12)
axes[1].set_title("Number of characters in each class", fontsize=15)

sns.boxplot(x='target', y='punctuation_count', data=df, ax=axes[2])
axes[2].set_xlabel('Target', fontsize=12)

axes[2].set_title("Number of punctuations in each class", fontsize=15)

## Cell 6:

df['hashtag_count'].loc[df['hashtag_count']>60] = 60
df['mention_count'].loc[df['mention_count']>60] = 60

f, axes = plt.subplots(3, 1, figsize=(20,30))

sns.boxplot(x='target', y='hashtag_count', data=df, ax=axes[0])
axes[0].set_xlabel('Target', fontsize=12)
axes[0].set_title("Number of Hashtags in each class", fontsize=15)

sns.boxplot(x='target', y='mention_count', data=df, ax=axes[1])
axes[1].set_xlabel('Target', fontsize=12)
axes[1].set_title("Number of Mentions in each class", fontsize=15)

sns.boxplot(x='target', y='url_count', data=df, ax=axes[2])
axes[2].set_xlabel('Target', fontsize=12)
axes[2].set_title("Number of URLs in each class", fontsize=15)
plt.show()

## Cell 7:

exclude = string.punctuation
def remove_url(text):
    pattern = re.compile(r'https?://\S+|www\.\S+')
    return pattern.sub(r'', text)

def remove_punc(text):
    return text.translate(str.maketrans('', '', exclude))

## Cell 8:

text1 = 'Check out my notebook https://www.kaggle.com/campusx/notebook8223fc1abb'
text2 = '!hello *world@ 1'
df['text'] = df['text'].apply(remove_url)

test_df['text'] = test_df['text'].apply(remove_url)


## Cell 9:

from transformers import BertModel, BertTokenizer
import torch
from torch import nn
from torch.utils.data import DataLoader
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report

## Cell 10:

tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

## Cell 11:

example_text = 'I will watch #Memento tonight!'
bert_input = tokenizer(example_text, padding='max_length', max_length = 15,
                      truncation = True, return_tensors = 'pt')

## Cell 12:

input_ids = torch.tensor(bert_input.input_ids)
attention_mask = torch.tensor(bert_input.attention_mask)
bert_model = BertModel.from_pretrained('bert-base-uncased')
last_hidden_state, pooled_output = bert_model(input_ids=input_ids, attention_mask=attention_mask, return_dict =False)

print(last_hidden_state.shape)
print(bert_model.config.hidden_size)

# Current relevent runtime information:
{'bert_model': {'execution_cell_source': {'cellno': 19, 'lineno': 3},
                'type': '<class '
                        "'transformers.models.bert.modeling_bert.BertModel'>"}}
# Target Cell:

import tensorflow as tf
tf.keras.utils.plot_model(bert_model)