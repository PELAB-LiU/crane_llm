# Executed Cells:
## Cell 1:

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.neural_network import MLPClassifier
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from catboost import CatBoostClassifier
from sklearn.metrics import accuracy_score

## Cell 2:


train_df = pd.read_csv('data/train_synthetic.csv')
test_df = pd.read_csv('data/test_synthetic.csv')
greeks_df = pd.read_csv('data/greeks_synthetic.csv')

## Cell 3:

train_df = pd.merge(train_df, greeks_df, on="Id")

## Cell 4:


train_df = train_df.drop("Id", axis=1)
test_df = test_df.drop("Id", axis=1)

## Cell 5:





categorical_cols_train = train_df.select_dtypes(include=["object"]).columns
categorical_cols_test = test_df.select_dtypes(include=["object"]).columns


train_df = pd.get_dummies(train_df, columns=categorical_cols_train)
test_df = pd.get_dummies(test_df, columns=categorical_cols_test)


train_df, test_df = train_df.align(test_df, join="left", axis=1, fill_value=0)

feature_names = train_df.columns

# Current relevent runtime information:
{'StandardScaler': {'type': "<class 'type'>"},
 'test_df': {'dtypes': ['float64', 'int64', 'bool'],
             'execution_cell_source': {'cellno': 12, 'lineno': 10},
             'has_nan': False,
             'shape': (5, 252),
             'type': 'pandas.core.frame.DataFrame'},
 'train_df': {'dtypes': ['float64', 'int64', 'bool'],
              'execution_cell_source': {'cellno': 12, 'lineno': 9},
              'has_nan': True,
              'shape': (624, 252),
              'type': 'pandas.core.frame.DataFrame'}}
# Target Cell:


scaler = StandardScaler()
train_df = scaler.fit_transform(train_df)
test_df = scaler.transform(test_df)