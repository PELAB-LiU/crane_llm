# Executed Cells:
## Cell 1:

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn import preprocessing
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings('ignore')

## Cell 2:

insurance_train = pd.read_csv("data/train_synthetic.csv.zip")
insurance_test = pd.read_csv("data/test_synthetic.csv.zip")

## Cell 3:

insurance_train['Employment_Info_4'].fillna(insurance_train['Employment_Info_4'].mean(), inplace=True)
insurance_train['Insurance_History_5'].fillna(insurance_train['Insurance_History_5'].mean(), inplace=True)
insurance_train['Employment_Info_6'].fillna(insurance_train['Employment_Info_6'].mean(), inplace=True)
insurance_train['Family_Hist_2'].fillna(insurance_train['Family_Hist_2'].mean(), inplace=True)
insurance_train['Family_Hist_3'].fillna(insurance_train['Family_Hist_3'].mean(), inplace=True)
insurance_train['Family_Hist_4'].fillna(insurance_train['Family_Hist_4'].mean(), inplace=True)
insurance_train['Family_Hist_5'].fillna(insurance_train['Family_Hist_5'].mean(), inplace=True)
insurance_train['Medical_History_1'].fillna(insurance_train['Medical_History_1'].mean(), inplace=True)
insurance_train['Medical_History_10'].fillna(insurance_train['Medical_History_10'].mean(), inplace=True)
insurance_train['Medical_History_15'].fillna(insurance_train['Medical_History_15'].mean(), inplace=True)
insurance_train['Medical_History_24'].fillna(insurance_train['Medical_History_24'].mean(), inplace=True)
insurance_train['Medical_History_32'].fillna(insurance_train['Medical_History_32'].mean(), inplace=True)

encode = LabelEncoder()
insurance_train['Product_Info_2'] = encode.fit_transform(insurance_train['Product_Info_2'])

insurance_train.dropna(axis=1, inplace = True)

## Cell 4:

insurance_test['Employment_Info_4'].fillna(insurance_test['Employment_Info_4'].mean(), inplace=True)
insurance_test['Insurance_History_5'].fillna(insurance_test['Insurance_History_5'].mean(), inplace=True)
insurance_test['Employment_Info_6'].fillna(insurance_test['Employment_Info_6'].mean(), inplace=True)
insurance_test['Family_Hist_2'].fillna(insurance_test['Family_Hist_2'].mean(), inplace=True)
insurance_test['Family_Hist_3'].fillna(insurance_test['Family_Hist_3'].mean(), inplace=True)
insurance_test['Family_Hist_4'].fillna(insurance_test['Family_Hist_4'].mean(), inplace=True)
insurance_test['Family_Hist_5'].fillna(insurance_test['Family_Hist_5'].mean(), inplace=True)
insurance_test['Medical_History_1'].fillna(insurance_test['Medical_History_1'].mean(), inplace=True)
insurance_test['Medical_History_10'].fillna(insurance_test['Medical_History_10'].mean(), inplace=True)
insurance_test['Medical_History_15'].fillna(insurance_test['Medical_History_15'].mean(), inplace=True)
insurance_test['Medical_History_24'].fillna(insurance_test['Medical_History_24'].mean(), inplace=True)
insurance_test['Medical_History_32'].fillna(insurance_test['Medical_History_32'].mean(), inplace=True)


insurance_test['Product_Info_2'] = encode.fit_transform(insurance_test['Product_Info_2'])

insurance_test.dropna(axis=1, inplace = True)
insurance_train.drop('InsuredInfo_7', axis = 1, inplace = True)

## Cell 5:

x = insurance_train.drop(['Id','Response'],axis = 1)
y = insurance_train['Response']

## Cell 6:

X_train, X_val, y_train, y_val = train_test_split(x, y, test_size=0.2, random_state=42)

## Cell 7:


RF = RandomForestClassifier(random_state = 1, n_estimators = 50,  min_samples_leaf = 10, criterion = 'gini',
                            oob_score = False)

## Cell 8:

RF.fit(X_train, y_train)


y_pred = RF.predict(X_val)


accuracy = accuracy_score(y_val, y_pred)

accuracy

## Cell 9:

val_predictions = RF.predict(x)

# Current relevent runtime information:
{'accuracy': {'execution_cell_source': {'cellno': 22, 'lineno': 7},
              'type': "<class 'numpy.float64'>",
              'value': 0.1209901490275322},
 'accuracy_score': {'type': "<class 'function'>"},
 'val_predictions': {'dtype': 'int64',
                     'execution_cell_source': {'cellno': 24, 'lineno': 1},
                     'has_nan': False,
                     'shape': (59381,),
                     'type': 'numpy.ndarray',
                     'value_info': {'num_unique': 8,
                                    'value_type': 'categorical numeric(no more '
                                                  'than 10 unique values)'},
                     'value_range': (1, 8)},
 'y': {'execution_cell_source': {'cellno': 18, 'lineno': 2},
       'type': "<class 'pandas.core.series.Series'>",
       'value_info': {'num_unique': 8,
                      'value_type': 'categorical numeric(no more than 10 '
                                    'unique values)'}}}
# Target Cell:





accuracy = accuracy_score(val_predictions, y)

print("Accuracy: ", accuracy)