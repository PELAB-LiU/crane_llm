# Executed Cells:
## Cell 1:





import numpy as np
import pandas as pd




import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))




## Cell 2:

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn import svm

## Cell 3:

data =pd.read_csv("data/train.csv")

data.head()

## Cell 4:

data['Embarked'].fillna('S', inplace=True)
data.loc[data.Fare.isnull(),'Fare'] = data['Fare'].mean()
data.loc[data.Age.isnull(),'Age'] = data['Age'].mean()

labels = data["Survived"]
features = data.drop(columns=['PassengerId','Survived','PassengerId','Cabin','Ticket','Name'])

hot =pd.get_dummies(features,columns=['Sex','Embarked'])
features =hot
features,labels

## Cell 5:

X_train,X_test,y_train,y_test =train_test_split(features, labels, test_size=0.3)

## Cell 6:

def evaluate(model,y_test=y_test):
    predictions = model.predict(X_test)
    acc = accuracy_score(predictions,y_test)
    return round(acc*100,3)

## Cell 7:

model = LogisticRegression()
model.fit(X_train, y_train)
acc = evaluate(model)
print(f'LogisticRegression (accuracy): {acc}%')

model = DecisionTreeClassifier(criterion='gini', max_depth=12, random_state=42)
model.fit(X_train, y_train)
acc = evaluate(model)
print(f'DecisionTreeClassifier with gini (accuracy): {acc}%')

model = DecisionTreeClassifier(criterion='entropy', max_depth=12, random_state=42)
model.fit(X_train, y_train)
acc = evaluate(model)
print(f'DecisionTreeClassifier with entropy (accuracy): {acc}%')

model = RandomForestClassifier(n_estimators=100)
model.fit(X_train, y_train)
acc = evaluate(model)




model = KNeighborsClassifier()
model.fit(X_train, y_train)
acc = evaluate(model)
print(f'KNeighborsClassifier (accuracy): {acc}%')

model = AdaBoostClassifier(n_estimators=100)
model.fit(X_train, y_train)
acc = evaluate(model)
print(f'AdaBoostClassifier (accuracy): {acc}%')





model_fix = GradientBoostingClassifier(n_estimators=100)
model_fix.fit(X_train, y_train)
acc = evaluate(model_fix)
print(f'GradientBoostingClassifier (accuracy): {acc}%')

model = GaussianNB()
model.fit(X_train, y_train)
acc = evaluate(model)
print(f'GaussianNB (accuracy): {acc}%')

model = svm.SVC(kernel='rbf')
model.fit(X_train, y_train)
acc = evaluate(model)
print(f'SVC (accuracy): {acc}%')

# Current relevent runtime information:
{'__method__features_columns': {'type': '<class '
                                        "'pandas.core.indexes.base.Index'>"},
 '__method__model_fix_feature_importances_': {'dtype': 'float64',
                                              'has_nan': False,
                                              'shape': (10,),
                                              'type': 'numpy.ndarray',
                                              'value_info': {'value_range': (0.004045577328864083,
                                                                             0.2743212267790055),
                                                             'value_type': 'continuous'},
                                              'value_range': (0.004045577328864083,
                                                              0.2743212267790055)},
 'features': {'dtypes': ['int64', 'float64', 'bool'],
              'execution_cell_source': {'cellno': 3, 'lineno': 9},
              'has_nan': False,
              'shape': (891, 10),
              'type': 'pandas.core.frame.DataFrame'},
 'model_fix': {'class_name': 'GradientBoostingClassifier',
               'execution_cell_source': {'cellno': 10, 'lineno': 37},
               'fitted_attributes': {'n_features_in_': 10, 'n_outputs_': None},
               'is_fitted': True,
               'module': 'sklearn.ensemble._gb',
               'type': '<class '
                       "'sklearn.ensemble._gb.GradientBoostingClassifier'>"}}
# Target Cell:

from pandas import Series



feature_importance = model_fix.feature_importances_
Series_feat_imp = Series(feature_importance, index=features.columns)