# Executed Cells:
## Cell 1:




import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

from sklearn import metrics
from sklearn import preprocessing
from sklearn import model_selection
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score

from sklearn.preprocessing import StandardScaler, MinMaxScaler

from sklearn.model_selection import train_test_split

from IPython.core.display import HTML

## Cell 2:

df = pd.read_csv('data/fashion-mnist_train.csv.zip')

## Cell 3:

labels = ["T-shirt/top","Trouser","Pullover","Dress","Coat","Sandal","Shirt",
          "Sneaker","Bag","Ankle boot"]

## Cell 4:

y = df['label'].values
X = df.drop(['label'] , axis=1).values

## Cell 5:

X = X/255

## Cell 6:


from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Current relevent runtime information:
{'X_test': {'dtype': 'float64',
            'has_nan': False,
            'shape': (12000, 784),
            'type': 'numpy.ndarray',
            'value_range': (0.0, 1.0)},
 'X_train': {'dtype': 'float64',
             'has_nan': False,
             'shape': (48000, 784),
             'type': 'numpy.ndarray',
             'value_range': (0.0, 1.0)},
 'accuracy_score': {'type': "<class 'function'>"},
 'y_test': {'dtype': 'int64',
            'has_nan': False,
            'shape': (12000,),
            'type': 'numpy.ndarray',
            'value_info': {'num_unique': 10,
                           'value_type': 'categorical numeric(no more than 10 '
                                         'unique values)'},
            'value_range': (0, 9)},
 'y_train': {'dtype': 'int64',
             'has_nan': False,
             'shape': (48000,),
             'type': 'numpy.ndarray',
             'value_info': {'num_unique': 10,
                            'value_type': 'categorical numeric(no more than 10 '
                                          'unique values)'},
             'value_range': (0, 9)}}
# Target Cell:

from xgboost import XGBClassifier



classifier = XGBClassifier(tree_method="hist", n_estimators=2, max_depth=2)

classifier.fit(X_train, y_train)
y_hat = classifier.predict(X_test)
accuracy_score(y_test, y_hat)