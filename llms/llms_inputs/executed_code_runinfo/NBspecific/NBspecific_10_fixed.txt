# Executed Cells:
## Cell 1:


import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
%matplotlib inline
import matplotlib as mat
mat.rcParams["figure.figsize"]=(15,8)
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

import datetime as dt
from time import time

## Cell 2:

df = pd.read_csv("data/Turbine_Data.csv",parse_dates=["Unnamed: 0"],
                 index_col="Unnamed: 0")
df.tail()

## Cell 3:

df.index=pd.to_datetime(df.index)
df.head(2)

## Cell 4:

df.drop_duplicates(inplace=True)

## Cell 5:


df.drop('WTG', axis=1, inplace=True)
df.drop('ControlBoxTemperature', axis=1, inplace=True)

## Cell 6:

no_fil=df.copy()

## Cell 7:

df=df[df.index>="2019-01-01"]

## Cell 8:

df =  df[df['ActivePower']>=0]

## Cell 9:

filter=df[['WindDirection', 'NacellePosition', 'HubTemperature',
       'BearingShaftTemperature', 'GearboxBearingTemperature',
       'GearboxOilTemperature', 'GeneratorWinding1Temperature',
       'GeneratorWinding2Temperature', 'GeneratorRPM', 'RotorRPM', 'WindSpeed',
       'ReactivePower', 'ActivePower']]

## Cell 10:


from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from sklearn import linear_model

df_mice = filter.copy()


mice_imputer = IterativeImputer(estimator=linear_model.BayesianRidge(), n_nearest_features=None, imputation_order='ascending')

df_mice_imputed = pd.DataFrame(mice_imputer.fit_transform(df_mice), columns=df_mice.columns,index=df_mice.index)

## Cell 11:


from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant


def compute_vif(considered_features):

    X = df_mice_imputed[considered_features]

    X['intercept'] = 1


    vif = pd.DataFrame()
    vif["Variable"] = X.columns
    vif["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]
    vif = vif[vif['Variable']!='intercept']
    return vif

## Cell 12:

pca_df=df_mice_imputed[[ 'HubTemperature',
       'BearingShaftTemperature', 'GearboxBearingTemperature',
       'GearboxOilTemperature', 'RotorRPM', 'WindSpeed',
       'ReactivePower',"ActivePower"]]

## Cell 13:

pca_df["ReactivePower"].mask( pca_df["ReactivePower"]<0, np.nan , inplace=True )
pca_df['GearboxOilTemperature'].mask( pca_df['GearboxOilTemperature']<40, np.nan , inplace=True )

## Cell 14:

out=pca_df.copy()

## Cell 15:

out=out.mask(out.sub(out.mean()).div(out.std()).abs().gt(2))

## Cell 16:

Final=pd.DataFrame(mice_imputer.fit_transform(out), columns=out.columns,index=out.index)

## Cell 17:

daily=no_fil.resample("D").mean()

## Cell 18:

daily['ActivePower']=daily['ActivePower'].interpolate()
daily['ActivePower'].isnull().sum()

## Cell 19:

daily['ActivePower']=daily['ActivePower'].fillna(method="bfill")
daily['ActivePower'].isnull().sum()

## Cell 20:

train = daily[:-30].copy()
test = daily[-30:].copy()

## Cell 21:

from math import sqrt
def check_stationarity(y, lags_plots=48, figsize=(22,8)):
    "Use Series as parameter"


    y = pd.Series(y)
    fig = plt.figure()

    ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=2)
    ax2 = plt.subplot2grid((3, 3), (1, 0))
    ax3 = plt.subplot2grid((3, 3), (1, 1))
    ax4 = plt.subplot2grid((3, 3), (2, 0), colspan=2)

    y.plot(ax=ax1, figsize=figsize)
    ax1.set_title('Wind Power Variation')
    plot_acf(y, lags=lags_plots, zero=False, ax=ax2);
    plot_pacf(y, lags=lags_plots, zero=False, ax=ax3);
    sns.distplot(y, bins=int(sqrt(len(y))), ax=ax4)
    ax4.set_title('Distribution Chart')

    plt.tight_layout()

    print('Results of Dickey-Fuller Test:')
    adfinput = adfuller(y)
    adftest = pd.Series(adfinput[0:4], index=['Test Statistic','p-value','Lags Used','Number of Observations Used'])
    adftest = round(adftest,4)

    for key, value in adfinput[4].items():
        adftest["Critical Value (%s)"%key] = value.round(4)

    print(adftest)

    if adftest[0].round(2) < adftest[5].round(2):
        print('\nThe Test Statistics is lower than the Critical Value of 5%.\nThe serie seems to be stationary')
    else:
        print("\nThe Test Statistics is higher than the Critical Value of 5%.\nThe serie isn't stationary")

# Current relevent runtime information:
{'check_stationarity': {'execution_cell_source': {'cellno': 72, 'lineno': 2},
                        'type': "<class 'function'>"},
 'train': {'execution_cell_source': {'cellno': 71, 'lineno': 1},
           'has_nan': True,
           'per_column': {'ActivePower': {'num_unique': 788,
                                          'type': 'continuous',
                                          'value_range': (-5.48891652,
                                                          1720.2008799963187)},
                          'AmbientTemperatue': {'num_unique': 718,
                                                'type': 'continuous',
                                                'value_range': (21.340544164657604,
                                                                37.69393305303885)},
                          'BearingShaftTemperature': {'num_unique': 448,
                                                      'type': 'continuous',
                                                      'value_range': (26.20513075782771,
                                                                      51.41225846406179)},
                          'Blade1PitchAngle': {'num_unique': 290,
                                               'type': 'continuous',
                                               'value_range': (-0.9344020153282238,
                                                               88.71959000000001)},
                          'Blade2PitchAngle': {'num_unique': 292,
                                               'type': 'continuous',
                                               'value_range': (-0.5441223913111477,
                                                               88.54826)},
                          'Blade3PitchAngle': {'num_unique': 292,
                                               'type': 'continuous',
                                               'value_range': (-0.5441223913111477,
                                                               88.54826)},
                          'GearboxBearingTemperature': {'num_unique': 448,
                                                        'type': 'continuous',
                                                        'value_range': (28.15740618210287,
                                                                        78.98551508942025)},
                          'GearboxOilTemperature': {'num_unique': 448,
                                                    'type': 'continuous',
                                                    'value_range': (27.924964753757852,
                                                                    68.34204199028207)},
                          'GeneratorRPM': {'num_unique': 448,
                                           'type': 'continuous',
                                           'value_range': (0.0,
                                                           1753.8728873273972)},
                          'GeneratorWinding1Temperature': {'num_unique': 448,
                                                           'type': 'continuous',
                                                           'value_range': (29.639329887550527,
                                                                           119.49037056018052)},
                          'GeneratorWinding2Temperature': {'num_unique': 448,
                                                           'type': 'continuous',
                                                           'value_range': (29.644574223745806,
                                                                           118.88119167393808)},
                          'HubTemperature': {'num_unique': 448,
                                             'type': 'continuous',
                                             'value_range': (26.30534585455136,
                                                             44.72241528852589)},
                          'MainBoxTemperature': {'num_unique': 448,
                                                 'type': 'continuous',
                                                 'value_range': (31.61273333804714,
                                                                 47.63011720287798)},
                          'NacellePosition': {'num_unique': 717,
                                              'type': 'continuous',
                                              'value_range': (54.13907056798623,
                                                              346.0)},
                          'ReactivePower': {'num_unique': 719,
                                            'type': 'continuous',
                                            'value_range': (-9.797319372727271,
                                                            349.13357070871353)},
                          'RotorRPM': {'num_unique': 445,
                                       'type': 'continuous',
                                       'value_range': (0.0, 15.7326349404321)},
                          'TurbineStatus': {'num_unique': 345,
                                            'type': 'continuous',
                                            'value_range': (1.5,
                                                            456575.09722222225)},
                          'WindDirection': {'num_unique': 717,
                                            'type': 'continuous',
                                            'value_range': (54.13907056798623,
                                                            346.0)},
                          'WindSpeed': {'num_unique': 720,
                                        'type': 'continuous',
                                        'value_range': (2.381481095189575,
                                                        14.190081088943527)}},
           'shape': (791, 19),
           'type': 'pandas.core.frame.DataFrame'}}
# Target Cell:

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import adfuller

check_stationarity(train['ActivePower'])