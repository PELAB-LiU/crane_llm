# Executed Cells:
## Cell 1:

from transformers import AutoModel,AutoConfig,AutoTokenizer,AutoModelForMultipleChoice

## Cell 2:

MODEL_NAME = 'microsoft/deberta-v2-xlarge'
MODEL_NAME_CHOICE = 'vinai/phobert-base'

## Cell 3:

from  transformers.modeling_outputs import MultipleChoiceModelOutput

## Cell 4:

from torch import nn

## Cell 5:

class CustomModelMultichoice(nn.Module):
    def __init__(self,config,num_choice):
        super(CustomModelMultichoice,self).__init__()
        model = AutoModelForMultipleChoice.from_config(config)
        model.classifier = nn.Linear(768,2)
        self.model = model

        self.sigmoid = nn.Sigmoid()
        self.num_choice = num_choice
    def forward(self,input_ids = None,token_type_ids = None ,attention_mask = None,labels = None):
        outputs = self.model(input_ids=input_ids,token_type_ids=token_type_ids,attention_mask=attention_mask)
        logits = self.sigmoid(outputs.logits)
        loss = None
        if labels is not None:
            loss_func = nn.NLLLoss()
            loss = loss_func(logits.view(-1,self.num_choice),labels.view(-1))
        return MultipleChoiceModelOutput(loss = loss,logits=logits,hidden_states= None,attentions =None)

## Cell 6:

config = AutoConfig.from_pretrained(MODEL_NAME_CHOICE)

CustomModel = CustomModelMultichoice(config,3)

## Cell 7:

prompt = "Bác Hồ là người nước nào ?."
candidate1 = "Việt Nam"
candidate2 = "Mỹ"
candidate3 = 'Việt Nam'

## Cell 8:

from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME_CHOICE)
inputs = tokenizer([[prompt, candidate1], [prompt, candidate2],[prompt, candidate3]], return_tensors="pt", padding=True)

## Cell 9:

import torch
labels = torch.tensor(0).unsqueeze(0)

## Cell 10:

inputs['input_ids'] = inputs['input_ids'].unsqueeze(0)
inputs['token_type_ids'] = inputs['token_type_ids'].unsqueeze(0)
inputs['attention_mask'] = inputs['attention_mask'].unsqueeze(0)

## Cell 11:

CustomModel.eval()

## Cell 12:

target = torch.tensor([[1, 0, 1]])
target

# Current relevent runtime information:
{'CustomModel': {'execution_cell_source': {'cellno': 8, 'lineno': 3},
                 'type': "<class '__main__.CustomModelMultichoice'>"},
 'inputs': {'execution_cell_source': {'cellno': 12, 'lineno': 4},
            'type': '<class '
                    "'transformers.tokenization_utils_base.BatchEncoding'>"},
 'target': {'device': 'cpu',
            'dtype': 'torch.int64',
            'execution_cell_source': {'cellno': 20, 'lineno': 1},
            'has_nan': False,
            'requires_grad': False,
            'shape': (1, 3),
            'type': "<class 'torch.Tensor'>"}}
# Target Cell:

out = CustomModel(**inputs,labels = target)