# Executed Cells:
## Cell 1:

import os
import torch
import torchvision
import numpy as np
from PIL import Image
import torch.nn as nn
from torch.nn import ReLU
import torch.optim as optim
import torch.nn.functional as F
import matplotlib.pyplot as plt
import torchvision.transforms as transforms
from torch.utils.data import Dataset,DataLoader
from torch.nn import Conv2d,MaxPool2d,Flatten,Linear


train_data_path = 'data_small/101/train'
test_data_path = 'data_small/101/val'
transform = transforms.Compose([
    transforms.Resize((227,227)),
    transforms.ToTensor(),
])

train_data=torchvision.datasets.ImageFolder(root = train_data_path,transform = transform)
test_data = torchvision.datasets.ImageFolder(root = test_data_path,transform = transform)


train_dataloader = DataLoader(dataset = train_data,batch_size=64,shuffle=True,drop_last=False)
test_dataloader = DataLoader(dataset = test_data,batch_size=64,shuffle=True,drop_last=False)


class module(nn.Module):
    def __init__(self):
        super(module,self).__init__()
        self.conv1 = Conv2d(3,96,11,stride = 4)
        self.relu1 = ReLU()
        self.maxpool1 = MaxPool2d(3,stride = 2)
        self.conv2 = Conv2d(96,256,5,stride = 1,padding = 2)
        self.relu2 = ReLU()
        self.maxpool2 = MaxPool2d(3,stride = 2)
        self.conv3 = Conv2d(256,384,3,stride = 1,padding = 1)
        self.relu3 = ReLU()
        self.conv4 = Conv2d(384,256,3,stride = 1,padding = 1)
        self.relu4 = ReLU()
        self.conv5 = Conv2d(256,256,3,stride = 1,padding = 1)
        self.relu5 = ReLU()
        self.maxpool5 = MaxPool2d(3,stride = 2)
        self.flatten = Flatten()
        self.fc1 = Linear(6*6*256,4096)
        self.fc2 = Linear(4096,101)


    def forward(self,x):
        x = self.conv1(x)
        x = self.relu1(x)
        x = self.maxpool1(x)
        x = self.conv2(x)
        x = self.relu2(x)
        x = self.maxpool2(x)
        x = self.conv3(x)
        x = self.relu3(x)
        x = self.conv4(x)
        x = self.relu4(x)
        x = self.conv5(x)
        x = self.relu5(x)
        x = self.maxpool5(x)
        x = self.flatten(x)
        x = self.fc1(x)
        x = self.fc2(x)
        return x


module = module()
if torch.cuda.is_available():
    module = module.cuda()


loss_fn = nn.CrossEntropyLoss()
if torch.cuda.is_available():
    loss_fn = loss_fn.cuda()


learning_rate = 0.001
optimizer = torch.optim.Adam(module.parameters(),lr = learning_rate)


total_train_step = 0
total_test_step = 0
epoch = 2

for i in range(epoch):
    print('------第{}轮训练开始------'.format(i+1))

    module.train()
    for data in train_dataloader:
        imgs,targets = data
        if torch.cuda.is_available():
            imgs = imgs.cuda()
            targets = targets.cuda()
        outputs = module(imgs)
        loss = loss_fn(outputs,targets)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        total_train_step = total_train_step + 1
        if total_train_step % 100 ==0:
            print("训练次数：{}，LOSS：{}".format(total_train_step,loss.item()))

    module.eval()
    total_test_loss = 0
    total_accuracy = 0
    with torch.no_grad():
        for data in test_dataloader:
            imgs,targets = data
            if torch.cuda.is_available():
                imgs = imgs.cuda()
                targets = targets.cuda()
            outputs = module(imgs)
            loss = loss_fn(outputs,targets)
            total_test_loss = total_test_loss + loss.item()
            accuracy = (outputs.argmax(1) == targets).sum()
            total_accuracy = total_accuracy + accuracy
    print('整体测试集LOSS:{}'.format(total_test_loss))
    print('正确率：{}'.format(total_accuracy/len(test_data)))
    total_test_step = total_test_step + 1

# Current relevent runtime information:
{'DataLoader': {'type': "<class 'type'>"},
 '__method__imgs_cuda': {'type': "<class 'builtin_function_or_method'>"},
 '__method__targets_cuda': {'type': "<class 'builtin_function_or_method'>"},
 '__method__torch_cuda': {'type': "<class 'module'>"},
 '__method__torchvision_datasets': {'type': "<class 'module'>"},
 'data': {'length': 2, 'type': "<class 'list'>"},
 'imgs': {'device': 'cpu',
          'dtype': 'torch.float32',
          'execution_cell_source': {'cellno': 3, 'lineno': 117},
          'has_nan': False,
          'requires_grad': False,
          'shape': (47, 3, 227, 227),
          'type': "<class 'torch.Tensor'>"},
 'loss_fn': {'execution_cell_source': {'cellno': 3, 'lineno': 79},
             'type': "<class 'torch.nn.modules.loss.CrossEntropyLoss'>"},
 'module': {'execution_cell_source': {'cellno': 3, 'lineno': 74},
            'type': "<class '__main__.module'>"},
 'outputs': {'device': 'cpu',
             'dtype': 'torch.float32',
             'execution_cell_source': {'cellno': 3, 'lineno': 119},
             'has_nan': False,
             'requires_grad': False,
             'shape': (47, 101),
             'type': "<class 'torch.Tensor'>"},
 'targets': {'device': 'cpu',
             'dtype': 'torch.int64',
             'execution_cell_source': {'cellno': 3, 'lineno': 118},
             'has_nan': False,
             'requires_grad': False,
             'shape': (47,),
             'type': "<class 'torch.Tensor'>",
             'value_info': {'value_range': (2, 100),
                            'value_type': 'continuous'}},
 'torch': {'type': "<class 'module'>"},
 'torchvision': {'type': "<class 'module'>"},
 'train_data': {'execution_cell_source': {'cellno': 3, 'lineno': 23},
                'type': "<class 'torchvision.datasets.folder.ImageFolder'>"},
 'train_data_path': {'execution_cell_source': {'cellno': 3, 'lineno': 16},
                     'type': "<class 'str'>",
                     'value': 'data_small/101/train'},
 'train_dataloader': {'batch_size': 64,
                      'dataset': {'batch_shapes': {'batch[0]': torch.Size([10, 3, 227, 227]),
                                                   'batch[1]': torch.Size([10])},
                                  'dataset_info': {'class_to_idx': {'type': 'dict'},
                                                   'classes': {'type': 'list'},
                                                   'extensions': {'type': 'tuple'},
                                                   'imgs': {'type': 'list'},
                                                   'loader': {'type': 'function'},
                                                   'root': {'type': 'str'},
                                                   'samples': {'type': 'list'},
                                                   'target_transform': {'type': 'NoneType'},
                                                   'targets': {'type': 'list'},
                                                   'transform': {'type': 'Compose'},
                                                   'transforms': {'type': 'StandardTransform'}},
                                  'sample_shapes': defaultdict(<class 'set'>,
                                                               {'input': {torch.Size([3, 227, 227])},
                                                                'label': {'int'}})},
                      'execution_cell_source': {'cellno': 3, 'lineno': 27},
                      'num_batches': 16,
                      'num_examples': 1010,
                      'type': 'torch.utils.data.dataloader.DataLoader'},
 'transforms': {'type': "<class 'module'>"}}
# Target Cell:

train_data_path = 'data_small/101/train'
train_data=torchvision.datasets.ImageFolder(root = train_data_path,transform=transforms)
train_dataloader = DataLoader(dataset = train_data,batch_size=64,shuffle=True,drop_last=False)
for data in train_dataloader:
    imgs,targets = data
    if torch.cuda.is_available():
        imgs = imgs.cuda()
        targets = targets.cuda()
    outputs = module(imgs)
    loss = loss_fn(outputs,targets)