# Executed Cells:
## Cell 1:



import math, os, re, warnings, random
import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
from kaggle_datasets import KaggleDatasets
from sklearn.utils import class_weight
from sklearn.metrics import classification_report, confusion_matrix
import tensorflow as tf
import tensorflow.keras.layers as L
from tensorflow.keras import optimizers, applications, Sequential, losses
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler


def seed_everything(seed=0):
    random.seed(seed)
    np.random.seed(seed)
    tf.random.set_seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    os.environ['TF_DETERMINISTIC_OPS'] = '1'

seed = 0
seed_everything(seed)
warnings.filterwarnings("ignore")

## Cell 2:



try:
    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()
    print(f'Running on TPU {tpu.master()}')
except ValueError:
    tpu = None

if tpu:
    tf.config.experimental_connect_to_cluster(tpu)
    tf.tpu.experimental.initialize_tpu_system(tpu)
    strategy = tf.distribute.experimental.TPUStrategy(tpu)
else:
    strategy = tf.distribute.get_strategy()

AUTO = tf.data.experimental.AUTOTUNE
REPLICAS = strategy.num_replicas_in_sync
print(f'REPLICAS: {REPLICAS}')

## Cell 3:

BATCH_SIZE = 16 * REPLICAS
WARMUP_EPOCHS = 3
WARMUP_LEARNING_RATE = 1e-4 * REPLICAS
EPOCHS = 30
LEARNING_RATE = 3e-5 * REPLICAS
HEIGHT = 192
WIDTH = 192
CHANNELS = 3
N_CLASSES = 104
ES_PATIENCE = 5

## Cell 4:

model_path = f'model_{HEIGHT}x{WIDTH}.h5'


GCS_PATH = "data/tfrecords-jpeg-{}x{}".format(HEIGHT, WIDTH)

TRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '/train/*.tfrec')
VALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '/val/*.tfrec')
TEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '/test/*.tfrec')

CLASSES = [
    'pink primrose', 'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',
    'wild geranium', 'tiger lily', 'moon orchid', 'bird of paradise', 'monkshood',
    'globe thistle', 'snapdragon', "colt's foot", 'king protea', 'spear thistle',
    'yellow iris', 'globe-flower', 'purple coneflower', 'peruvian lily',
    'balloon flower', 'giant white arum lily', 'fire lily', 'pincushion flower',
    'fritillary', 'red ginger', 'grape hyacinth', 'corn poppy',
    'prince of wales feathers', 'stemless gentian', 'artichoke', 'sweet william',
    'carnation', 'garden phlox', 'love in the mist', 'cosmos',  'alpine sea holly',
    'ruby-lipped cattleya', 'cape flower', 'great masterwort',  'siam tulip',
    'lenten rose', 'barberton daisy', 'daffodil',  'sword lily', 'poinsettia',
    'bolero deep blue',  'wallflower', 'marigold', 'buttercup', 'daisy',
    'common dandelion', 'petunia', 'wild pansy', 'primula',  'sunflower',
    'lilac hibiscus', 'bishop of llandaff', 'gaura',  'geranium', 'orange dahlia',
    'pink-yellow dahlia', 'cautleya spicata',  'japanese anemone',
    'black-eyed susan', 'silverbush', 'californian poppy',  'osteospermum',
    'spring crocus', 'iris', 'windflower',  'tree poppy', 'gazania', 'azalea',
    'water lily',  'rose', 'thorn apple', 'morning glory', 'passion flower',
    'lotus', 'toad lily', 'anthurium', 'frangipani',  'clematis', 'hibiscus',
    'columbine', 'desert-rose', 'tree mallow', 'magnolia', 'cyclamen ',
    'watercress',  'canna lily', 'hippeastrum ', 'bee balm', 'pink quill',
    'foxglove', 'bougainvillea', 'camellia', 'mallow',  'mexican petunia',
    'bromelia', 'blanket flower', 'trumpet creeper',  'blackberry lily',
    'common tulip', 'wild rose']

## Cell 5:


AUTO = tf.data.experimental.AUTOTUNE

def decode_image(image_data):
    image = tf.image.decode_jpeg(image_data, channels=3)
    image = tf.cast(image, tf.float32) / 255.0
    image = tf.reshape(image, [HEIGHT, WIDTH, 3])
    return image

def read_labeled_tfrecord(example):
    LABELED_TFREC_FORMAT = {
        "image": tf.io.FixedLenFeature([], tf.string),
        "class": tf.io.FixedLenFeature([], tf.int64),
    }
    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)
    image = decode_image(example['image'])
    label = tf.cast(example['class'], tf.int32)
    return image, label

def read_unlabeled_tfrecord(example):
    UNLABELED_TFREC_FORMAT = {
        "image": tf.io.FixedLenFeature([], tf.string),
        "id": tf.io.FixedLenFeature([], tf.string),

    }
    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)
    image = decode_image(example['image'])
    idnum = example['id']
    return image, idnum

def load_dataset(filenames, labeled=True, ordered=False):
    ignore_order = tf.data.Options()
    if not ordered:
        ignore_order.experimental_deterministic = False

    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO)
    dataset = dataset.with_options(ignore_order)
    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)

    return dataset

def data_augment(image, label):
    crop_size = tf.random.uniform([], int(HEIGHT*.7), HEIGHT, dtype=tf.int32)

    image = tf.image.random_flip_left_right(image)
    image = tf.image.random_flip_up_down(image)
    image = tf.image.random_saturation(image, lower=0, upper=2)






    image = tf.image.random_crop(image, size=[crop_size, crop_size, CHANNELS])
    image = tf.image.resize(image, size=[HEIGHT, WIDTH])

    return image, label

def get_training_dataset():
    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)
    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)
    dataset = dataset.repeat()
    dataset = dataset.shuffle(2048)
    dataset = dataset.batch(BATCH_SIZE)
    dataset = dataset.prefetch(AUTO)
    return dataset

def get_training_dataset_preview(ordered=True):
    dataset = load_dataset(TRAINING_FILENAMES, labeled=True, ordered=ordered)
    dataset = dataset.batch(BATCH_SIZE)
    dataset = dataset.cache()
    dataset = dataset.prefetch(AUTO)
    return dataset

def get_validation_dataset(ordered=False):
    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)
    dataset = dataset.batch(BATCH_SIZE)
    dataset = dataset.cache()
    dataset = dataset.prefetch(AUTO)
    return dataset

def get_test_dataset(ordered=False):
    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)
    dataset = dataset.batch(BATCH_SIZE)
    dataset = dataset.prefetch(AUTO)
    return dataset

def count_data_items(filenames):

    n = [int(re.compile(r"-([0-9]*)\.").search(filename).group(1)) for filename in filenames]
    return np.sum(n)

## Cell 6:


NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)
train_dataset = get_training_dataset_preview(ordered=True)
y_train = next(iter(train_dataset.unbatch().map(lambda image, label: label).batch(NUM_TRAINING_IMAGES))).numpy()
print(f'Number of training images {NUM_TRAINING_IMAGES}')


NUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)
valid_dataset = get_validation_dataset(ordered=True)
y_valid = next(iter(valid_dataset.unbatch().map(lambda image, label: label).batch(NUM_VALIDATION_IMAGES))).numpy()
print(f'Number of validation images {NUM_VALIDATION_IMAGES}')


NUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)
print(f'Number of test images {NUM_TEST_IMAGES}')
test_dataset = get_test_dataset(ordered=True)

# Current relevent runtime information:
{'CLASSES': {'execution_cell_source': {'cellno': 3, 'lineno': 10},
             'length': 104,
             'type': "<class 'list'>",
             'value_info': {'num_unique': 104,
                            'value_type': 'categorical or object'}},
 '__method__np_asarray': {'type': "<class 'builtin_function_or_method'>"},
 '__method__plt_show': {'type': "<class 'function'>"},
 '__method__plt_subplots': {'type': "<class 'function'>"},
 '__method__sns_barplot': {'type': "<class 'function'>"},
 'np': {'type': "<class 'module'>"},
 'plt': {'type': "<class 'module'>"},
 'sns': {'type': "<class 'module'>"},
 'y_train': {'dtype': 'int32',
             'execution_cell_source': {'cellno': 6, 'lineno': 4},
             'has_nan': False,
             'shape': (12753,),
             'type': 'numpy.ndarray',
             'value_info': {'value_range': (0, 103),
                            'value_type': 'continuous'},
             'value_range': (0, 103)},
 'y_valid': {'dtype': 'int32',
             'execution_cell_source': {'cellno': 6, 'lineno': 10},
             'has_nan': False,
             'shape': (3712,),
             'type': 'numpy.ndarray',
             'value_info': {'value_range': (0, 103),
                            'value_type': 'continuous'},
             'value_range': (0, 103)}}
# Target Cell:

train_agg = np.asarray([[label, (y_train == index).sum()] for index, label in enumerate(CLASSES)])
valid_agg = np.asarray([[label, (y_valid == index).sum()] for index, label in enumerate(CLASSES)])

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(24, 64))



ax1 = sns.barplot(x=train_agg[...,1].astype(int), y=train_agg[...,0], order=CLASSES, ax=ax1)

ax1.set_title('Train', fontsize=30)
ax1.tick_params(labelsize=16)



ax2 = sns.barplot(x=valid_agg[...,1].astype(int), y=valid_agg[...,0], order=CLASSES, ax=ax2)

ax2.set_title('Validation', fontsize=30)
ax2.tick_params(labelsize=16)

plt.show()