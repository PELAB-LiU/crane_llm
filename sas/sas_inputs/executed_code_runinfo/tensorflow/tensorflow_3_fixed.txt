# Executed Cells:
## Cell 1:

try:

  %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import os
import numpy as np
import matplotlib.pyplot as plt





## Cell 2:


PATH = 'data_small/cats_and_dogs'



train_dir      = os.path.join(PATH, 'train')
validation_dir = os.path.join(PATH, 'validation')
test_dir       = os.path.join(PATH, 'test')


total_train = sum([len(files) for r, d, files in os.walk(train_dir)])
total_val   = sum([len(files) for r, d, files in os.walk(validation_dir)])
total_test  = len(os.listdir(test_dir))

print('Train:', total_train)
print('Validation:', total_val)
print('Test:', total_test)

batch_size = 128
epochs = 30
IMG_HEIGHT = 150
IMG_WIDTH = 150

## Cell 3:



train_image_generator = ImageDataGenerator(rescale = 1./255)
validation_image_generator = ImageDataGenerator(rescale = 1./255)
test_image_generator = ImageDataGenerator(rescale = 1./255)

train_data_gen = train_image_generator.flow_from_directory(
    directory =train_dir,
    batch_size = batch_size,
    class_mode = "binary",
    target_size=(IMG_HEIGHT,IMG_WIDTH)
)
val_data_gen = validation_image_generator.flow_from_directory(
    directory = validation_dir,
    batch_size = batch_size,
    class_mode = "binary",
    target_size=(IMG_HEIGHT,IMG_WIDTH)
)
test_data_gen  = test_image_generator.flow_from_directory(
                    PATH,
                    target_size=(IMG_HEIGHT, IMG_WIDTH),
                    batch_size=batch_size,
                    classes=['test'],
                    shuffle=False)


## Cell 4:


def plotImages(images_arr, probabilities = False):
    fig, axes = plt.subplots(len(images_arr), 1, figsize=(5,len(images_arr) * 3))
    if probabilities is False:
      for img, ax in zip( images_arr, axes):
          ax.imshow(img)
          ax.axis('off')
    else:
      for img, probability, ax in zip( images_arr, probabilities, axes):
          ax.imshow(img)
          ax.axis('off')
          if probability > 0.5:
              ax.set_title("%.2f" % (probability*100) + "% dog")
          else:
              ax.set_title("%.2f" % ((1-probability)*100) + "% cat")
    plt.show()

sample_training_images, _ = next(train_data_gen)
plotImages(sample_training_images[:5])

## Cell 5:


train_image_generator = ImageDataGenerator(
    rescale=1./255,
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    zoom_range=0.1,
    horizontal_flip=False,
    vertical_flip=True,
    shear_range=0.2,
    channel_shift_range=0.2,
)

## Cell 6:


train_data_gen = train_image_generator.flow_from_directory(batch_size=batch_size,
                                                     directory=train_dir,
                                                     target_size=(IMG_HEIGHT, IMG_WIDTH),
                                                     class_mode='binary')

augmented_images = [train_data_gen[0][0][0] for i in range(5)]

plotImages(augmented_images)

## Cell 7:


from tensorflow.keras.optimizers import Adam
model = Sequential()
from tensorflow.keras import datasets, layers, models, Input
model.add(Input(shape=(IMG_HEIGHT, IMG_WIDTH, 3)))
model.add(layers.Conv2D(16, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(16, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(16, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.summary()
optimizer = Adam(0.0005)
model.compile(optimizer=optimizer,
              loss='binary_crossentropy',
              metrics=['accuracy'])

## Cell 8:


history = model.fit(
    train_data_gen,
    validation_data=val_data_gen,
    epochs= 2
)

## Cell 9:

model.save("train.h5")

# Annotated Target Code:






from tensorflow.keras.models import load_model

model = load_model("train.h5")